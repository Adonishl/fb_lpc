// automaticly generated by simple_example.pc, don't modify
#pragma once

#include "simple_example_generated.h"

#include "lpc/client_base.h"
#include "lpc/message.h"
#include "lpc/server_base.h"
#include <memory>
#include <iostream>

namespace lpc {

class SimpleExampleClient : public lpc::ClientBase {
public:
  SimpleExampleClient(unsigned int input_buffer_size,
                      unsigned int output_buffer_size)
      : lpc::ClientBase(input_buffer_size, output_buffer_size) {}
  
  void SimpleCal(const lpc::Message<lpc::SimpleExample::SimpleInput> *input,
                 lpc::Message<lpc::SimpleExample::SimpleOutput> &output) {
    Call(0, input, output);
  }
  
};

// Impl only declare the member function here, user must impl them before
// compile
class SimpleExampleServerImpl {
public:
  
  void SimpleCal(const lpc::Message<lpc::SimpleExample::SimpleInput> *input,
                 lpc::Message<lpc::SimpleExample::SimpleOutput> &output);
  
};

class SimpleExampleServer : public lpc::ServerBase {
public:
  SimpleExampleServer(unsigned int input_buffer_size,
                      unsigned int output_buffer_size)
      : lpc::ServerBase(input_buffer_size, output_buffer_size) {
    impl_ = std::unique_ptr<SimpleExampleServerImpl>();
  }
  // Serve() will run in a while-loop, which keep listen from client
  void Serve() {
    std::cout << "serving start..." << std::endl;
    while (true) {
      unsigned int func_id = 0;
      unsigned int data_size = 0;
      auto data_ptr = this->GetInput(func_id, data_size);
      switch (func_id) {
      
      case 0: {
        auto input_msg =
            lpc::Message<lpc::SimpleExample::SimpleInput>(data_ptr, data_size);
        lpc::Message<lpc::SimpleExample::SimpleOutput> output_msg;
        impl_->SimpleCal(&input_msg, output_msg);
        this->SendOutput(output_msg.data(), output_msg.size());
        break;
      }
      
      default:
        std::cerr << "func_id: " << func_id << "is not supported" << std::endl;
      }
    }
  }

private:
  std::unique_ptr<SimpleExampleServerImpl> impl_;
};

} // namespace lpc