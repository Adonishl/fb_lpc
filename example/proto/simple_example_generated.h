// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMPLEEXAMPLE_LPC_SIMPLEEXAMPLE_H_
#define FLATBUFFERS_GENERATED_SIMPLEEXAMPLE_LPC_SIMPLEEXAMPLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 29,
             "Non-compatible flatbuffers version included");

namespace lpc {
namespace SimpleExample {

struct InputData;

struct SimpleInput;
struct SimpleInputBuilder;

struct SimpleOutput;
struct SimpleOutputBuilder;

enum Status : int8_t {
  Status_OK = 0,
  Status_ERROR = 1,
  Status_UNKNOWN = 2,
  Status_MIN = Status_OK,
  Status_MAX = Status_UNKNOWN
};

inline const Status (&EnumValuesStatus())[3] {
  static const Status values[] = {
    Status_OK,
    Status_ERROR,
    Status_UNKNOWN
  };
  return values;
}

inline const char * const *EnumNamesStatus() {
  static const char * const names[4] = {
    "OK",
    "ERROR",
    "UNKNOWN",
    nullptr
  };
  return names;
}

inline const char *EnumNameStatus(Status e) {
  if (flatbuffers::IsOutRange(e, Status_OK, Status_UNKNOWN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStatus()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) InputData FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t in_[2];
  float weight_;

 public:
  InputData()
      : in_(),
        weight_(0) {
  }
  InputData(float _weight)
      : in_(),
        weight_(flatbuffers::EndianScalar(_weight)) {
  }
  InputData(flatbuffers::span<const int32_t, 2> _in, float _weight)
      : weight_(flatbuffers::EndianScalar(_weight)) {
    flatbuffers::CastToArray(in_).CopyFromSpan(_in);
  }
  const flatbuffers::Array<int32_t, 2> *in() const {
    return &flatbuffers::CastToArray(in_);
  }
  float weight() const {
    return flatbuffers::EndianScalar(weight_);
  }
};
FLATBUFFERS_STRUCT_END(InputData, 12);

struct SimpleInput FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SimpleInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_DATA = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const lpc::SimpleExample::InputData *data() const {
    return GetStruct<const lpc::SimpleExample::InputData *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<lpc::SimpleExample::InputData>(verifier, VT_DATA, 4) &&
           verifier.EndTable();
  }
};

struct SimpleInputBuilder {
  typedef SimpleInput Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(SimpleInput::VT_NAME, name);
  }
  void add_data(const lpc::SimpleExample::InputData *data) {
    fbb_.AddStruct(SimpleInput::VT_DATA, data);
  }
  explicit SimpleInputBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SimpleInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SimpleInput>(end);
    return o;
  }
};

inline flatbuffers::Offset<SimpleInput> CreateSimpleInput(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    const lpc::SimpleExample::InputData *data = nullptr) {
  SimpleInputBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<SimpleInput> CreateSimpleInputDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const lpc::SimpleExample::InputData *data = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return lpc::SimpleExample::CreateSimpleInput(
      _fbb,
      name__,
      data);
}

struct SimpleOutput FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SimpleOutputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_OUTPUT = 6
  };
  lpc::SimpleExample::Status status() const {
    return static_cast<lpc::SimpleExample::Status>(GetField<int8_t>(VT_STATUS, 0));
  }
  float output() const {
    return GetField<float>(VT_OUTPUT, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           VerifyField<float>(verifier, VT_OUTPUT, 4) &&
           verifier.EndTable();
  }
};

struct SimpleOutputBuilder {
  typedef SimpleOutput Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(lpc::SimpleExample::Status status) {
    fbb_.AddElement<int8_t>(SimpleOutput::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_output(float output) {
    fbb_.AddElement<float>(SimpleOutput::VT_OUTPUT, output, 0.0f);
  }
  explicit SimpleOutputBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SimpleOutput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SimpleOutput>(end);
    return o;
  }
};

inline flatbuffers::Offset<SimpleOutput> CreateSimpleOutput(
    flatbuffers::FlatBufferBuilder &_fbb,
    lpc::SimpleExample::Status status = lpc::SimpleExample::Status_OK,
    float output = 0.0f) {
  SimpleOutputBuilder builder_(_fbb);
  builder_.add_output(output);
  builder_.add_status(status);
  return builder_.Finish();
}

}  // namespace SimpleExample
}  // namespace lpc

#endif  // FLATBUFFERS_GENERATED_SIMPLEEXAMPLE_LPC_SIMPLEEXAMPLE_H_
